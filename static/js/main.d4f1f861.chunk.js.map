{"version":3,"sources":["components/PageHeader.js","string-utils.js","components/Hint.js","components/GameContainer.js","constants.js","App.js","index.js"],"names":["PageHeader","totalNumberOfAnswers","totalNumberOfCorrectAnswers","numberOfAuthorsLeft","Navbar","NavbarBrand","className","Badge","color","maskedInput","item","split","map","word","replace","join","prepareString","value","trim","toUpperCase","Hint","props","state","showHint","answersToBeMasked","this","Button","outline","size","onClick","setState","ListGroup","index","ListGroupItem","key","Component","GameContainer","answerIndicators","showResults","handleAnswers","bind","isAnswerCorrect","prevProps","currentQuestion","e","preventDefault","answers","Object","assign","numberOfCorrectAnswers","numberOfAnswers","keys","creations","length","forEach","inputName","isCorrectAnswer","some","everythingAnsweredCorrectly","currentlyAnsweredCorrectly","nextButton","document","getElementById","focus","Col","md","notes","mode","onInputChange","onNext","Container","Label","for","author","Row","onSubmit","autoComplete","answerKey","isAnsweredCorrectly","FormGroup","xs","sm","Input","type","id","name","placeholder","onChange","readOnly","showAllAnswers","initialState","App","data","randomQuestion","handleOnNext","handleOnInputChange","prevState","firstInput","ANSWER_INPUT_PREFIX","event","target","splice","indexOf","newQuestion","Math","floor","random","ReactDOM","render"],"mappings":"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","file":"static/js/main.d4f1f861.chunk.js","sourcesContent":["import React from 'react';\nimport {Badge, Navbar, NavbarBrand} from 'reactstrap';\n\nexport const PageHeader = ({totalNumberOfAnswers, totalNumberOfCorrectAnswers, numberOfAuthorsLeft}) => {\n  return <Navbar>\n    <NavbarBrand>Это свояк</NavbarBrand>\n    {totalNumberOfAnswers > 0 && <div className={'text-right'}>\n      <Badge color={'primary'} className={'mr-2'}>Всего: {totalNumberOfAnswers}</Badge>\n      <Badge color={'success'} className={'mr-2'}>Верных: {totalNumberOfCorrectAnswers}</Badge>\n      <Badge color={'info'}>Осталось авторов: {numberOfAuthorsLeft}</Badge>\n    </div>}\n  </Navbar>;\n};\n","export const maskedInput = (item) => {\n  return item.split(\" \").map((word) => {\n    return word.replace(/./gi, '_ ');\n  }).join(\"\\xa0\\xa0\\xa0\");\n};\n\nexport const prepareString = (value) => {\n  return value ? value.trim().toUpperCase().replace(\"Ё\", \"Е\") : '';\n};\n","import React, {Component, Fragment} from 'react';\nimport {Button, ListGroup, ListGroupItem} from 'reactstrap';\nimport {maskedInput} from '../string-utils';\n\nexport class Hint extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {showHint: false};\n  }\n\n  render() {\n    const {answersToBeMasked} = this.props;\n    return (<Fragment>\n      <Button outline color={'dark'} size={'sm'} onClick={() => this.setState({showHint: !this.state.showHint})}>\n        <span>&nbsp;?&nbsp;</span>\n      </Button>\n      {this.state.showHint && <ListGroup className={'mt-2'}>{answersToBeMasked.map((item, index) => {\n        return <ListGroupItem key={index} color={'info'}>{maskedInput(item)}</ListGroupItem>\n      })}\n      </ListGroup>}\n    </Fragment>);\n  }\n}\n","import React, {Component, Fragment} from 'react';\nimport {Badge, Button, Col, Container, FormGroup, Input, Label, ListGroup, ListGroupItem, Row} from 'reactstrap';\nimport {Hint} from './Hint';\nimport {ANSWER_INPUT_PREFIX} from '../constants';\nimport {maskedInput, prepareString} from '../string-utils';\n\nexport class GameContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {answerIndicators: {}, showResults: false};\n    this.handleAnswers = this.handleAnswers.bind(this);\n    this.isAnswerCorrect = this.isAnswerCorrect.bind(this);\n  }\n\n  componentWillUpdate(prevProps) {\n    if (this.props.currentQuestion !== prevProps.currentQuestion) {\n      this.setState({showResults: false, answerIndicators: {}});\n    }\n  }\n\n  handleAnswers(e) {\n    e.preventDefault();\n    const {answers, currentQuestion} = this.props;\n    this.setState({showResults: true});\n    const answerIndicators = Object.assign({}, this.state.answerIndicators);\n    let numberOfCorrectAnswers = 0;\n    const numberOfAnswers = Object.keys(currentQuestion.creations).length;\n    Object.keys(answers).forEach((inputName) => {\n      const isCorrectAnswer = currentQuestion.creations.some(item => prepareString(item) === prepareString(answers[inputName]));\n      answerIndicators[inputName] = isCorrectAnswer ? 'success' : 'danger';\n      if (isCorrectAnswer) {\n        numberOfCorrectAnswers++;\n      }\n    });\n    this.setState({\n      answerIndicators,\n      everythingAnsweredCorrectly: numberOfCorrectAnswers === numberOfAnswers,\n      currentlyAnsweredCorrectly: numberOfCorrectAnswers\n    });\n    const nextButton = document.getElementById('next');\n    if (nextButton) {\n      nextButton.focus();\n    }\n  }\n\n  isAnswerCorrect(index) {\n    return this.state.answerIndicators[ANSWER_INPUT_PREFIX + index] === 'success';\n  }\n\n  showAllAnswers() {\n    const {currentQuestion} = this.props;\n    if (this.state.everythingAnsweredCorrectly) {\n      return (<Col md={6}>\n        <ListGroup>\n          <ListGroupItem color={'primary'}>Всё правильно</ListGroupItem>\n          {currentQuestion.notes &&\n          <ListGroupItem color=\"info\">{currentQuestion.notes}</ListGroupItem>}\n        </ListGroup>\n      </Col>);\n    }\n    return <Col md={6}>\n      <h2>Все правильные ответы:</h2>\n      <ListGroup>\n        {currentQuestion.creations.map((item, index) => {\n          return <ListGroupItem key={index} color={'success'}>{item}</ListGroupItem>\n        })}\n        {currentQuestion.notes &&\n        <Fragment><ListGroupItem/><ListGroupItem color=\"info\">{currentQuestion.notes}</ListGroupItem></Fragment>}\n      </ListGroup>\n    </Col>;\n  }\n\n  render() {\n    const {answers, currentQuestion, mode, onInputChange, onNext} = this.props;\n    const {showResults} = this.state;\n    return <Container className={'my-2'}>\n      <Label for={'answer'}>{currentQuestion.author}</Label>\n      <Row className={'mb-2'}>\n        <Col md={'10'} className={'d-flex-md'}>\n          <form onSubmit={this.handleAnswers} autoComplete={'off'}>\n            {currentQuestion.creations.map((item, index) => {\n              const answerKey = ANSWER_INPUT_PREFIX + index;\n              const isAnsweredCorrectly = this.isAnswerCorrect(index);\n              return <FormGroup key={index}>\n                <Row>\n                  <Col xs={12} sm={8}>\n                    <Input type={'text'}\n                           autoComplete={'off'}\n                           id={answerKey}\n                           name={answerKey}\n                           placeholder={mode === 'easy' ? maskedInput(item) : ''}\n                           value={answers[answerKey] || ''}\n                           onChange={onInputChange}\n                           readOnly={showResults}/>\n                  </Col>\n                  <Col xs={12} sm={4}>\n                    {showResults && <Badge color={isAnsweredCorrectly ? 'success' : 'danger'}>\n                      {isAnsweredCorrectly ? 'Верно' : 'Неверно'}\n                    </Badge>}\n                  </Col>\n                </Row>\n              </FormGroup>\n            })}\n            <Row>\n              <Col xs={12} sm={8}>{!showResults &&\n              <Button className={'float-right mb-1'} color={'primary'} onClick={this.handleAnswers}\n                      type={'submit'}>OK</Button>}\n              </Col>\n            </Row>\n            <Row>\n              <Col xs={12} sm={8}>\n                <Button className={'float-right'} color={'info'}\n                        onClick={() => onNext(showResults ? this.state.currentlyAnsweredCorrectly : 0)}\n                        id={'next'}>Следующий автор</Button>\n              </Col>\n            </Row>\n          </form>\n        </Col>\n      </Row>\n      {!showResults && <Hint answersToBeMasked={currentQuestion.creations}/>}\n      {showResults && <div>{this.showAllAnswers()}</div>}\n    </Container>;\n  }\n}\n","export const ANSWER_INPUT_PREFIX = 'si-answer-';\n","import React, {Component, Fragment} from 'react';\nimport {PageHeader} from './components/PageHeader';\nimport {GameContainer} from './components/GameContainer';\nimport {ANSWER_INPUT_PREFIX} from './constants';\nimport data from './si.json';\n\nconst initialState = {\n  answers: {},\n  mode: 'hard',\n  totalNumberOfAnswers: 0,\n  totalNumberOfCorrectAnswers: 0\n};\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.data = Object.assign([], this.props.data || data);\n    this.state = {...initialState, currentQuestion: this.randomQuestion()};\n    this.handleOnNext = this.handleOnNext.bind(this);\n    this.handleOnInputChange = this.handleOnInputChange.bind(this);\n    this.randomQuestion = this.randomQuestion.bind(this);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.currentQuestion && prevState.currentQuestion !== this.state.currentQuestion) {\n      const firstInput = document.getElementById(ANSWER_INPUT_PREFIX + 0);\n      if (firstInput) {\n        firstInput.focus();\n      }\n    }\n  }\n\n  handleOnInputChange(event) {\n    this.setState({answers: {...this.state.answers, [event.target.name]: event.target.value}});\n  }\n\n  handleOnNext(currentlyAnsweredCorrectly) {\n    const {currentQuestion, totalNumberOfAnswers, totalNumberOfCorrectAnswers} = this.state;\n    this.data.splice(this.data.indexOf(currentQuestion), 1);\n    this.setState({\n      ...initialState,\n      currentQuestion: this.randomQuestion(currentQuestion),\n      totalNumberOfAnswers: totalNumberOfAnswers + Object.keys(currentQuestion.creations).length,\n      totalNumberOfCorrectAnswers: totalNumberOfCorrectAnswers + currentlyAnsweredCorrectly,\n    });\n  }\n\n  randomQuestion(currentQuestion) {\n    const newQuestion = this.data[Math.floor(Math.random() * this.data.length)];\n    if (newQuestion === currentQuestion) {\n      return this.randomQuestion(currentQuestion);\n    }\n    return newQuestion;\n  };\n\n  render() {\n    const {answers, currentQuestion, mode, totalNumberOfAnswers, totalNumberOfCorrectAnswers} = this.state;\n\n    return (\n      <Fragment>\n        <PageHeader totalNumberOfAnswers={totalNumberOfAnswers}\n                    totalNumberOfCorrectAnswers={totalNumberOfCorrectAnswers}\n                    numberOfAuthorsLeft={this.data.length}/>\n        {this.data.length === 0 && <h2>Игра окончена</h2>}\n        {this.data.length > 0 && <GameContainer currentQuestion={currentQuestion}\n                                                answers={answers}\n                                                mode={mode}\n                                                onNext={this.handleOnNext}\n                                                onInputChange={this.handleOnInputChange}/>}\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}