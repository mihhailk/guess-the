{"version":3,"sources":["components/PageHeader.js","string-utils.js","components/Hint.js","components/GameContainer.js","constants.js","components/GameOver.js","App.js","index.js"],"names":["PageHeader","numberOfAuthorsLeft","totalNumberOfAnswers","totalNumberOfCorrectAnswers","Navbar","NavbarBrand","className","Badge","color","maskedInput","item","split","map","word","replace","join","prepareString","value","trim","toUpperCase","Hint","props","state","showHint","answersToBeMasked","this","Button","size","onClick","setState","title","ListGroup","index","ListGroupItem","key","Component","GameContainer","answerIndicators","showResults","handleAnswers","bind","isAnswerCorrect","prevProps","currentQuestion","e","preventDefault","answers","Object","assign","numberOfCorrectAnswers","numberOfAnswers","keys","creations","length","forEach","inputName","isCorrectAnswer","some","correctAnswer","one","other","levenshtein","everythingAnsweredCorrectly","currentlyAnsweredCorrectly","nextButton","document","getElementById","focus","Col","md","notes","mode","onInputChange","onNext","onRestart","Container","Label","for","author","Row","onSubmit","autoComplete","answerKey","isAnsweredCorrectly","FormGroup","xs","sm","Input","type","id","name","placeholder","onChange","readOnly","showAllAnswers","block","GameOver","initialState","ls","answeredQuestionId","answeredQuestionsIds","JSON","parse","App","data","answeredIds","filter","question","includes","randomQuestion","handleOnNext","handleOnInputChange","startOver","prevState","firstInput","ANSWER_INPUT_PREFIX","answered","push","stringify","event","target","isGameOver","indexOf","unansweredQuestions","newQuestion","Math","floor","random","ReactDOM","render"],"mappings":"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","file":"static/js/main.dc5bece8.chunk.js","sourcesContent":["import React from 'react';\nimport {Badge, Navbar, NavbarBrand} from 'reactstrap';\n\nexport const PageHeader = ({numberOfAuthorsLeft, totalNumberOfAnswers, totalNumberOfCorrectAnswers}) => {\n  return <Navbar>\n    <NavbarBrand>Это свояк</NavbarBrand>\n    {numberOfAuthorsLeft > -1 && <div className={'text-right'}>\n      <Badge color={'info'} className={'mr-2'}>Осталось авторов: {numberOfAuthorsLeft}</Badge>\n      <Badge color={'primary'} className={'mr-2'}>Всего: {totalNumberOfAnswers}</Badge>\n      <Badge color={'success'}>Верных: {totalNumberOfCorrectAnswers}</Badge>\n    </div>}\n  </Navbar>;\n};\n","import levenshtein from 'js-levenshtein';\n\nexport const maskedInput = (item) => {\n  return item.split(\" \").map((word) => {\n    return word.replace(/./gi, '_ ');\n  }).join(\"\\xa0\\xa0\\xa0\");\n};\n\nexport const areSimilar = (one, other) => {\n  return levenshtein(prepareString(one), prepareString(other)) < 2;\n};\n\nconst prepareString = (value) => {\n  return value ? value.trim().toUpperCase().replace(\"Ё\", \"Е\") : '';\n};\n","import React, {Component, Fragment} from 'react';\nimport {Button, ListGroup, ListGroupItem} from 'reactstrap';\nimport {maskedInput} from '../string-utils';\n\nexport class Hint extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {showHint: false};\n  }\n\n  render() {\n    const {answersToBeMasked} = this.props;\n    return (<Fragment>\n      <Button color={'secondary'}\n              size={'sm'}\n              onClick={() => this.setState({showHint: !this.state.showHint})}\n              title={'Подскажи'}>\n        <span>&nbsp;?&nbsp;</span>\n      </Button>\n      {this.state.showHint && <ListGroup className={'mt-2'}>{answersToBeMasked.map((item, index) => {\n        return <ListGroupItem key={index} color={'info'}>{maskedInput(item)}</ListGroupItem>\n      })}\n      </ListGroup>}\n    </Fragment>);\n  }\n}\n","import React, {Component} from 'react';\nimport {Badge, Button, Col, Container, FormGroup, Input, Label, ListGroup, ListGroupItem, Row} from 'reactstrap';\nimport {Hint} from './Hint';\nimport {ANSWER_INPUT_PREFIX} from '../constants';\nimport {maskedInput, areSimilar} from '../string-utils';\n\nexport class GameContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {answerIndicators: {}, showResults: false};\n    this.handleAnswers = this.handleAnswers.bind(this);\n    this.isAnswerCorrect = this.isAnswerCorrect.bind(this);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.currentQuestion !== prevProps.currentQuestion) {\n      this.setState({showResults: false, answerIndicators: {}});\n    }\n  }\n\n  handleAnswers(e) {\n    e.preventDefault();\n    const {answers, currentQuestion} = this.props;\n    this.setState({showResults: true});\n    const answerIndicators = Object.assign({}, this.state.answerIndicators);\n    let numberOfCorrectAnswers = 0;\n    const numberOfAnswers = Object.keys(currentQuestion.creations).length;\n    Object.keys(answers).forEach((inputName) => {\n      const isCorrectAnswer = currentQuestion.creations.some(\n        correctAnswer => areSimilar(correctAnswer, answers[inputName])\n      );\n      answerIndicators[inputName] = isCorrectAnswer ? 'success' : 'danger';\n      if (isCorrectAnswer) {\n        numberOfCorrectAnswers++;\n      }\n    });\n    this.setState({\n      answerIndicators,\n      everythingAnsweredCorrectly: numberOfCorrectAnswers === numberOfAnswers,\n      currentlyAnsweredCorrectly: numberOfCorrectAnswers\n    });\n    const nextButton = document.getElementById('next');\n    if (nextButton) {\n      nextButton.focus();\n    }\n  }\n\n  isAnswerCorrect(index) {\n    return this.state.answerIndicators[ANSWER_INPUT_PREFIX + index] === 'success';\n  }\n\n  showAllAnswers() {\n    const {currentQuestion} = this.props;\n    if (this.state.everythingAnsweredCorrectly) {\n      return (<Col md={6}>\n        <ListGroup>\n          <ListGroupItem color={'primary'}>Всё правильно</ListGroupItem>\n          {currentQuestion.notes &&\n          <ListGroupItem color=\"info\">{currentQuestion.notes}</ListGroupItem>}\n        </ListGroup>\n      </Col>);\n    }\n    return <Col md={6}>\n      <h2>Все правильные ответы:</h2>\n      <ListGroup>\n        {currentQuestion.creations.map((item, index) => {\n          return <ListGroupItem key={index} color={'success'}>{item}</ListGroupItem>\n        })}\n      </ListGroup>\n      {currentQuestion.notes &&\n      <ListGroup><ListGroupItem color=\"info\" className={'mt-4'}>{currentQuestion.notes}</ListGroupItem></ListGroup>}\n    </Col>;\n  }\n\n  render() {\n    const {answers, currentQuestion, mode, onInputChange, onNext, onRestart} = this.props;\n    const {showResults} = this.state;\n    return <Container className={'my-2'}>\n      <Label for={'answer'}>{currentQuestion.author}</Label>\n      <Row className={'mb-2'}>\n        <Col md={'10'} className={'d-flex-md'}>\n          <form onSubmit={this.handleAnswers} autoComplete={'off'}>\n            {currentQuestion.creations.map((item, index) => {\n              const answerKey = ANSWER_INPUT_PREFIX + index;\n              const isAnsweredCorrectly = this.isAnswerCorrect(index);\n              return <FormGroup key={index}>\n                <Row>\n                  <Col xs={12} sm={8}>\n                    <Input type={'text'}\n                           autoComplete={'off'}\n                           id={answerKey}\n                           name={answerKey}\n                           placeholder={mode === 'easy' ? maskedInput(item) : ''}\n                           value={answers[answerKey] || ''}\n                           onChange={onInputChange}\n                           readOnly={showResults}/>\n                  </Col>\n                  <Col xs={12} sm={4}>\n                    {showResults && <Badge color={isAnsweredCorrectly ? 'success' : 'danger'}>\n                      {isAnsweredCorrectly ? 'Верно' : 'Неверно'}\n                    </Badge>}\n                  </Col>\n                </Row>\n              </FormGroup>\n            })}\n            <Row>\n              <Col xs={12} sm={8}>{!showResults &&\n              <Button className={'float-right mb-1'} color={'primary'} onClick={this.handleAnswers}\n                      type={'submit'}>Проверить</Button>}\n              </Col>\n            </Row>\n            <Row>\n              <Col xs={12} sm={8}>\n                <Button className={'float-right'} color={'secondary'}\n                        onClick={() => onNext(showResults ? this.state.currentlyAnsweredCorrectly : 0)}\n                        id={'next'}>Следующий автор</Button>\n              </Col>\n            </Row>\n          </form>\n        </Col>\n      </Row>\n      {!showResults && <Hint answersToBeMasked={currentQuestion.creations}/>}\n      {showResults && <div>{this.showAllAnswers()}</div>}\n      <Button className={'mt-5'} color={'link'} block onClick={onRestart}>Начать заново</Button>\n    </Container>;\n  }\n}\n","export const ANSWER_INPUT_PREFIX = 'si-answer-';\n\nexport const ANSWERED_QUESTIONS_IDS = 'si:answered-ids';\nexport const TOTAL_ANSWERS_KEY = 'si:numberOfTotalAnswers';\nexport const TOTAL_CORRECT_ANSWERS_KEY = 'si:numberOfCorrectAnswers';\n","import React from 'react';\nimport {Button} from 'reactstrap';\n\nexport const GameOver = ({onRestart}) => {\n  return <div className={'text-center'}>\n    <h2>Игра окончена</h2>\n    <Button onClick={onRestart} color={'primary'} className={'primary mt-2'}>Начать заново</Button>\n  </div>\n};\n","import React, {Component, Fragment} from 'react';\nimport {PageHeader} from './components/PageHeader';\nimport {GameContainer} from './components/GameContainer';\nimport {GameOver} from \"./components/GameOver\";\nimport {ANSWER_INPUT_PREFIX, ANSWERED_QUESTIONS_IDS, TOTAL_ANSWERS_KEY, TOTAL_CORRECT_ANSWERS_KEY} from './constants';\nimport * as ls from 'local-storage';\nimport data from './si.json';\nimport './App.css';\n\nconst initialState = {\n  answers: {},\n  mode: 'hard',\n  totalNumberOfAnswers: ls.get(TOTAL_ANSWERS_KEY) || 0,\n  totalNumberOfCorrectAnswers: ls.get(TOTAL_CORRECT_ANSWERS_KEY) || 0,\n  answeredQuestionId: null\n};\n\nconst answeredQuestionsIds = () => {\n  return JSON.parse(ls.get(ANSWERED_QUESTIONS_IDS)) || [];\n};\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.data = Object.assign([], this.props.data || data);\n    const answeredIds = answeredQuestionsIds();\n    this.state = {\n      ...initialState,\n      numberOfAuthorsLeft: this.data.filter((question, id) => !answeredIds.includes(id)).length,\n      currentQuestion: this.randomQuestion()\n    };\n\n    this.handleOnNext = this.handleOnNext.bind(this);\n    this.handleOnInputChange = this.handleOnInputChange.bind(this);\n    this.randomQuestion = this.randomQuestion.bind(this);\n    this.startOver = this.startOver.bind(this);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.currentQuestion && prevState.currentQuestion !== this.state.currentQuestion) {\n      const firstInput = document.getElementById(ANSWER_INPUT_PREFIX + 0);\n      if (firstInput) {\n        firstInput.focus();\n      }\n    }\n\n    if (this.state.answeredQuestionId !== null && this.state.answeredQuestionId !== prevState.answeredQuestionId) {\n      const answered = answeredQuestionsIds();\n      answered.push(this.state.answeredQuestionId);\n      ls.set(ANSWERED_QUESTIONS_IDS, JSON.stringify(answered));\n    }\n\n    if (this.state.totalNumberOfAnswers !== prevState.totalNumberOfAnswers) {\n      ls.set(TOTAL_ANSWERS_KEY, this.state.totalNumberOfAnswers);\n    }\n\n    if (this.state.totalNumberOfCorrectAnswers !== prevState.totalNumberOfCorrectAnswers) {\n      ls.set(TOTAL_CORRECT_ANSWERS_KEY, this.state.totalNumberOfCorrectAnswers);\n    }\n  }\n\n  handleOnInputChange(event) {\n    this.setState({answers: {...this.state.answers, [event.target.name]: event.target.value}});\n  }\n\n  handleOnNext(currentlyAnsweredCorrectly) {\n    const {currentQuestion, totalNumberOfAnswers, totalNumberOfCorrectAnswers, numberOfAuthorsLeft} = this.state;\n    const isGameOver = numberOfAuthorsLeft - 1 === 0;\n    this.setState({\n      ...initialState,\n      currentQuestion: isGameOver ? null : this.randomQuestion(currentQuestion),\n      totalNumberOfAnswers: totalNumberOfAnswers + Object.keys(currentQuestion.creations).length,\n      totalNumberOfCorrectAnswers: totalNumberOfCorrectAnswers + currentlyAnsweredCorrectly,\n      numberOfAuthorsLeft: numberOfAuthorsLeft - 1,\n      answeredQuestionId: this.data.indexOf(currentQuestion)\n    });\n  }\n\n  randomQuestion(currentQuestion) {\n    const unansweredQuestions = this.data.filter((question, id) => !answeredQuestionsIds().includes(id));\n    if (unansweredQuestions.length === 0) return null;\n\n    const nextQuestionIndex = Math.floor(Math.random() * unansweredQuestions.length);\n    const newQuestion = unansweredQuestions[nextQuestionIndex];\n    if (newQuestion === currentQuestion) {\n      return this.randomQuestion(currentQuestion);\n    }\n    return newQuestion;\n  }\n\n  startOver() {\n    ls.clear();\n    this.setState({\n      answers: {},\n      mode: 'hard',\n      totalNumberOfAnswers: 0,\n      totalNumberOfCorrectAnswers: 0,\n      answeredQuestionId: null,\n      numberOfAuthorsLeft: this.data.length,\n      currentQuestion: this.randomQuestion()\n    });\n  }\n\n\n  render() {\n    const {\n      answers, currentQuestion, mode, totalNumberOfAnswers, totalNumberOfCorrectAnswers, numberOfAuthorsLeft\n    } = this.state;\n\n    return (\n      <Fragment>\n        <PageHeader totalNumberOfAnswers={totalNumberOfAnswers}\n                    totalNumberOfCorrectAnswers={totalNumberOfCorrectAnswers}\n                    numberOfAuthorsLeft={numberOfAuthorsLeft}/>\n        {\n          numberOfAuthorsLeft === 0 && <GameOver onRestart={this.startOver}/>\n        }\n        {\n          numberOfAuthorsLeft >= 0 && currentQuestion !== null &&\n          <GameContainer currentQuestion={currentQuestion}\n                         answers={answers}\n                         mode={mode}\n                         onNext={this.handleOnNext}\n                         onInputChange={this.handleOnInputChange}\n                         onRestart={this.startOver}/>\n        }\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}