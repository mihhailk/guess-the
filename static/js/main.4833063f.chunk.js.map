{"version":3,"sources":["components/PageHeader.js","string-utils.js","components/Hint.js","constants.js","components/GameContainer.js","components/GameOver.js","App.js","index.js"],"names":["PageHeader","numberOfAuthorsLeft","totalNumberOfAnswers","totalNumberOfCorrectAnswers","Navbar","NavbarBrand","className","Badge","color","maskedInput","item","split","map","word","replace","join","prepareString","value","trim","toUpperCase","Hint","props","state","showHint","answersToBeMasked","this","Button","size","onClick","setState","title","ListGroup","index","ListGroupItem","Component","ANSWER_INPUT_PREFIX","ANSWERED_QUESTIONS_IDS","TOTAL_ANSWERS_KEY","TOTAL_CORRECT_ANSWERS_KEY","GameContainer","answerIndicators","showResults","handleAnswers","bind","isAnswerCorrect","prevProps","currentQuestion","e","preventDefault","answers","Object","assign","numberOfCorrectAnswers","numberOfAnswers","keys","creations","length","forEach","inputName","isCorrectAnswer","some","correctAnswer","one","other","levenshtein","everythingAnsweredCorrectly","currentlyAnsweredCorrectly","nextButton","document","getElementById","focus","Col","md","notes","mode","onInputChange","onNext","onRestart","Container","Label","for","author","Row","onSubmit","autoComplete","answerKey","isAnsweredCorrectly","FormGroup","xs","sm","Input","type","id","name","placeholder","onChange","readOnly","showAllAnswers","block","GameOver","initialState","ls","answeredQuestionId","answeredQuestionsIds","JSON","parse","App","data","answeredIds","filter","question","includes","randomQuestion","handleOnNext","handleOnInputChange","startOver","prevState","firstInput","answered","push","stringify","event","target","isGameOver","indexOf","unansweredQuestions","newQuestion","Math","floor","random","ReactDOM","render"],"mappings":"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","file":"static/js/main.4833063f.chunk.js","sourcesContent":["import React from 'react';\nimport {Badge, Navbar, NavbarBrand} from 'reactstrap';\n\nexport const PageHeader = ({numberOfAuthorsLeft, totalNumberOfAnswers, totalNumberOfCorrectAnswers}) => {\n  return <Navbar>\n    <NavbarBrand>Это свояк</NavbarBrand>\n    {numberOfAuthorsLeft > -1 && <div className={'text-right'}>\n      <Badge color={'info'} className={'mr-2'}>Осталось авторов: {numberOfAuthorsLeft}</Badge>\n      <Badge color={'primary'} className={'mr-2'}>Всего: {totalNumberOfAnswers}</Badge>\n      <Badge color={'success'}>Верных: {totalNumberOfCorrectAnswers}</Badge>\n    </div>}\n  </Navbar>;\n};\n","import levenshtein from 'js-levenshtein';\n\nexport const maskedInput = (item) => {\n  return item.split(\" \").map((word) => {\n    return word.replace(/./gi, '_ ');\n  }).join(\"\\xa0\\xa0\\xa0\");\n};\n\nexport const areSimilar = (one, other) => {\n  if (one.length === 1 && other.length === 1) return one === other;\n  return levenshtein(prepareString(one), prepareString(other)) < 2;\n};\n\nconst prepareString = (value) => {\n  return value ? value.trim().toUpperCase().replace(\"Ё\", \"Е\") : '';\n};\n","import React, {Component, Fragment} from 'react';\nimport {Button, ListGroup, ListGroupItem} from 'reactstrap';\nimport {maskedInput} from '../string-utils';\n\nexport class Hint extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {showHint: false};\n  }\n\n  render() {\n    const {answersToBeMasked} = this.props;\n    return (<Fragment>\n      <Button color={'secondary'}\n              size={'sm'}\n              onClick={() => this.setState({showHint: !this.state.showHint})}\n              title={'Подскажи'}>\n        <span>&nbsp;?&nbsp;</span>\n      </Button>\n      {this.state.showHint && <ListGroup className={'mt-2'}>{answersToBeMasked.map((item, index) => {\n        return <ListGroupItem key={index} color={'info'}>{maskedInput(item)}</ListGroupItem>\n      })}\n      </ListGroup>}\n    </Fragment>);\n  }\n}\n","export const ANSWER_INPUT_PREFIX = 'si-answer-';\n\nexport const ANSWERED_QUESTIONS_IDS = 'si:answered-ids';\nexport const TOTAL_ANSWERS_KEY = 'si:numberOfTotalAnswers';\nexport const TOTAL_CORRECT_ANSWERS_KEY = 'si:numberOfCorrectAnswers';\n","import React, {Component} from 'react';\nimport {Badge, Button, Col, Container, FormGroup, Input, Label, ListGroup, ListGroupItem, Row} from 'reactstrap';\nimport {Hint} from './Hint';\nimport {ANSWER_INPUT_PREFIX} from '../constants';\nimport {maskedInput, areSimilar} from '../string-utils';\n\nexport class GameContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {answerIndicators: {}, showResults: false};\n    this.handleAnswers = this.handleAnswers.bind(this);\n    this.isAnswerCorrect = this.isAnswerCorrect.bind(this);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.currentQuestion !== prevProps.currentQuestion) {\n      this.setState({showResults: false, answerIndicators: {}});\n    }\n  }\n\n  handleAnswers(e) {\n    e.preventDefault();\n    const {answers, currentQuestion} = this.props;\n    this.setState({showResults: true});\n    const answerIndicators = Object.assign({}, this.state.answerIndicators);\n    let numberOfCorrectAnswers = 0;\n    const numberOfAnswers = Object.keys(currentQuestion.creations).length;\n    Object.keys(answers).forEach((inputName) => {\n      const isCorrectAnswer = currentQuestion.creations.some(\n        correctAnswer => areSimilar(correctAnswer, answers[inputName])\n      );\n      answerIndicators[inputName] = isCorrectAnswer ? 'success' : 'danger';\n      if (isCorrectAnswer) {\n        numberOfCorrectAnswers++;\n      }\n    });\n    this.setState({\n      answerIndicators,\n      everythingAnsweredCorrectly: numberOfCorrectAnswers === numberOfAnswers,\n      currentlyAnsweredCorrectly: numberOfCorrectAnswers\n    });\n    const nextButton = document.getElementById('next');\n    if (nextButton) {\n      nextButton.focus();\n    }\n  }\n\n  isAnswerCorrect(index) {\n    return this.state.answerIndicators[ANSWER_INPUT_PREFIX + index] === 'success';\n  }\n\n  showAllAnswers() {\n    const {currentQuestion} = this.props;\n    if (this.state.everythingAnsweredCorrectly) {\n      return (<Col md={6}>\n        <ListGroup>\n          <ListGroupItem color={'primary'}>Всё правильно</ListGroupItem>\n          {currentQuestion.notes &&\n          <ListGroupItem color=\"info\">{currentQuestion.notes}</ListGroupItem>}\n        </ListGroup>\n      </Col>);\n    }\n    return <Col md={6}>\n      <h2>Все правильные ответы:</h2>\n      <ListGroup>\n        {currentQuestion.creations.map((item, index) => {\n          return <ListGroupItem key={index} color={'success'}>{item}</ListGroupItem>\n        })}\n      </ListGroup>\n      {currentQuestion.notes &&\n      <ListGroup><ListGroupItem color=\"info\" className={'mt-4'}>{currentQuestion.notes}</ListGroupItem></ListGroup>}\n    </Col>;\n  }\n\n  render() {\n    const {answers, currentQuestion, mode, onInputChange, onNext, onRestart} = this.props;\n    const {showResults} = this.state;\n    return <Container className={'my-2'}>\n      <Label for={'answer'}>{currentQuestion.author}</Label>\n      <Row className={'mb-2'}>\n        <Col md={'10'} className={'d-flex-md'}>\n          <form onSubmit={this.handleAnswers} autoComplete={'off'}>\n            {currentQuestion.creations.map((item, index) => {\n              const answerKey = ANSWER_INPUT_PREFIX + index;\n              const isAnsweredCorrectly = this.isAnswerCorrect(index);\n              return <FormGroup key={index}>\n                <Row>\n                  <Col xs={12} sm={8}>\n                    <Input type={'text'}\n                           autoComplete={'off'}\n                           id={answerKey}\n                           name={answerKey}\n                           placeholder={mode === 'easy' ? maskedInput(item) : ''}\n                           value={answers[answerKey] || ''}\n                           onChange={onInputChange}\n                           readOnly={showResults}/>\n                  </Col>\n                  <Col xs={12} sm={4}>\n                    {showResults && <Badge color={isAnsweredCorrectly ? 'success' : 'danger'}>\n                      {isAnsweredCorrectly ? 'Верно' : 'Неверно'}\n                    </Badge>}\n                  </Col>\n                </Row>\n              </FormGroup>\n            })}\n            <Row>\n              <Col xs={12} sm={8}>{!showResults &&\n              <Button className={'float-right mb-1'} color={'primary'} onClick={this.handleAnswers}\n                      type={'submit'}>Проверить</Button>}\n              </Col>\n            </Row>\n            <Row>\n              <Col xs={12} sm={8}>\n                <Button className={'float-right'} color={'secondary'}\n                        onClick={() => onNext(showResults ? this.state.currentlyAnsweredCorrectly : 0)}\n                        id={'next'}>Следующий автор</Button>\n              </Col>\n            </Row>\n          </form>\n        </Col>\n      </Row>\n      {!showResults && <Hint answersToBeMasked={currentQuestion.creations}/>}\n      {showResults && <div>{this.showAllAnswers()}</div>}\n      <Button className={'mt-5'} color={'link'} block onClick={onRestart}>Начать заново</Button>\n    </Container>;\n  }\n}\n","import React from 'react';\nimport {Button} from 'reactstrap';\n\nexport const GameOver = ({onRestart}) => {\n  return <div className={'text-center'}>\n    <h2>Игра окончена</h2>\n    <Button onClick={onRestart} color={'primary'} className={'primary mt-2'}>Начать заново</Button>\n  </div>\n};\n","import React, {Component, Fragment} from 'react';\nimport {PageHeader} from './components/PageHeader';\nimport {GameContainer} from './components/GameContainer';\nimport {GameOver} from \"./components/GameOver\";\nimport {ANSWER_INPUT_PREFIX, ANSWERED_QUESTIONS_IDS, TOTAL_ANSWERS_KEY, TOTAL_CORRECT_ANSWERS_KEY} from './constants';\nimport * as ls from 'local-storage';\nimport data from './si.json';\nimport './App.css';\n\nconst initialState = {\n  answers: {},\n  mode: 'hard',\n  totalNumberOfAnswers: ls.get(TOTAL_ANSWERS_KEY) || 0,\n  totalNumberOfCorrectAnswers: ls.get(TOTAL_CORRECT_ANSWERS_KEY) || 0,\n  answeredQuestionId: null\n};\n\nconst answeredQuestionsIds = () => {\n  return JSON.parse(ls.get(ANSWERED_QUESTIONS_IDS)) || [];\n};\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.data = Object.assign([], this.props.data || data);\n    const answeredIds = answeredQuestionsIds();\n    this.state = {\n      ...initialState,\n      numberOfAuthorsLeft: this.data.filter((question, id) => !answeredIds.includes(id)).length,\n      currentQuestion: this.randomQuestion()\n    };\n\n    this.handleOnNext = this.handleOnNext.bind(this);\n    this.handleOnInputChange = this.handleOnInputChange.bind(this);\n    this.randomQuestion = this.randomQuestion.bind(this);\n    this.startOver = this.startOver.bind(this);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.currentQuestion && prevState.currentQuestion !== this.state.currentQuestion) {\n      const firstInput = document.getElementById(ANSWER_INPUT_PREFIX + 0);\n      if (firstInput) {\n        firstInput.focus();\n      }\n    }\n\n    if (this.state.answeredQuestionId !== null && this.state.answeredQuestionId !== prevState.answeredQuestionId) {\n      const answered = answeredQuestionsIds();\n      answered.push(this.state.answeredQuestionId);\n      ls.set(ANSWERED_QUESTIONS_IDS, JSON.stringify(answered));\n    }\n\n    if (this.state.totalNumberOfAnswers !== prevState.totalNumberOfAnswers) {\n      ls.set(TOTAL_ANSWERS_KEY, this.state.totalNumberOfAnswers);\n    }\n\n    if (this.state.totalNumberOfCorrectAnswers !== prevState.totalNumberOfCorrectAnswers) {\n      ls.set(TOTAL_CORRECT_ANSWERS_KEY, this.state.totalNumberOfCorrectAnswers);\n    }\n  }\n\n  handleOnInputChange(event) {\n    this.setState({answers: {...this.state.answers, [event.target.name]: event.target.value}});\n  }\n\n  handleOnNext(currentlyAnsweredCorrectly) {\n    const {currentQuestion, totalNumberOfAnswers, totalNumberOfCorrectAnswers, numberOfAuthorsLeft} = this.state;\n    const isGameOver = numberOfAuthorsLeft - 1 === 0;\n    this.setState({\n      ...initialState,\n      currentQuestion: isGameOver ? null : this.randomQuestion(currentQuestion),\n      totalNumberOfAnswers: totalNumberOfAnswers + Object.keys(currentQuestion.creations).length,\n      totalNumberOfCorrectAnswers: totalNumberOfCorrectAnswers + currentlyAnsweredCorrectly,\n      numberOfAuthorsLeft: numberOfAuthorsLeft - 1,\n      answeredQuestionId: this.data.indexOf(currentQuestion)\n    });\n  }\n\n  randomQuestion(currentQuestion) {\n    const unansweredQuestions = this.data.filter((question, id) => !answeredQuestionsIds().includes(id));\n    if (unansweredQuestions.length === 0) return null;\n\n    const nextQuestionIndex = Math.floor(Math.random() * unansweredQuestions.length);\n    const newQuestion = unansweredQuestions[nextQuestionIndex];\n    if (newQuestion === currentQuestion) {\n      return this.randomQuestion(currentQuestion);\n    }\n    return newQuestion;\n  }\n\n  startOver() {\n    ls.clear();\n    this.setState({\n      answers: {},\n      mode: 'hard',\n      totalNumberOfAnswers: 0,\n      totalNumberOfCorrectAnswers: 0,\n      answeredQuestionId: null,\n      numberOfAuthorsLeft: this.data.length,\n      currentQuestion: this.randomQuestion()\n    });\n  }\n\n\n  render() {\n    const {\n      answers, currentQuestion, mode, totalNumberOfAnswers, totalNumberOfCorrectAnswers, numberOfAuthorsLeft\n    } = this.state;\n\n    return (\n      <Fragment>\n        <PageHeader totalNumberOfAnswers={totalNumberOfAnswers}\n                    totalNumberOfCorrectAnswers={totalNumberOfCorrectAnswers}\n                    numberOfAuthorsLeft={numberOfAuthorsLeft}/>\n        {\n          numberOfAuthorsLeft === 0 && <GameOver onRestart={this.startOver}/>\n        }\n        {\n          numberOfAuthorsLeft >= 0 && currentQuestion !== null &&\n          <GameContainer currentQuestion={currentQuestion}\n                         answers={answers}\n                         mode={mode}\n                         onNext={this.handleOnNext}\n                         onInputChange={this.handleOnInputChange}\n                         onRestart={this.startOver}/>\n        }\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}